{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\LABSREACT\\\\lab3\\\\AwesomeProject\\\\screens\\\\QrScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nexport default function QrScreen(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n\n    try {\n      var parsedData = JSON.parse(data);\n      navigation.state.params.saveItem(parsedData);\n      alert(\"\\u041A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442 \" + parsedData.name + \" \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\");\n    } catch (_unused) {\n      alert('Ошибка чтения контакта. Неверный QR-code');\n    }\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'flex-end'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/LABSREACT/lab3/AwesomeProject/screens/QrScreen.js"],"names":["React","useState","useEffect","BarCodeScanner","QrScreen","props","navigation","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","parsedData","JSON","parse","state","params","saveItem","alert","name","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA,MAE9BC,UAF8B,GAEfD,KAFe,CAE9BC,UAF8B;;AAAA,kBAIIL,QAAQ,CAAC,IAAD,CAJZ;AAAA;AAAA,MAI/BM,aAJ+B;AAAA,MAIhBC,gBAJgB;;AAAA,mBAKRP,QAAQ,CAAC,KAAD,CALA;AAAA;AAAA,MAK/BQ,OAL+B;AAAA,MAKtBC,UALsB;;AAOtCR,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BC,cAAc,CAACQ,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAClDL,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAME,QAAI;AACH,UAAIM,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAjB;AACAT,MAAAA,UAAU,CAACa,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,CAAiCL,UAAjC;AAEAM,MAAAA,KAAK,iDAAYN,UAAU,CAACO,IAAvB,uDAAL;AACA,KALD,CAKE,gBAAM;AACTD,MAAAA,KAAK,CAAC,0CAAD,CAAL;AACE;AAED,GAhBD;;AAkBA,MAAIf,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLiB,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,aAAa,EAAE,QAFV;AAGLC,MAAAA,cAAc,EAAE;AAHX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAEjB,OAAO,GAAGkB,SAAH,GAAed,oBAD1C;AAEE,IAAA,KAAK,EAAEe,UAAU,CAACC,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWGpB,OAAO,IACN,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,mBAAf;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CADF;AAiBD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n// class AddScreen extends Component\r\nexport default function QrScreen(props) {\r\n\r\n  const { navigation } = props;\r\n\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n\tsetScanned(true);\r\n\t// let obj = {\r\n\t// \tname: 'Alexander',\r\n\t// \tphone: '435345',\r\n\t// \tsite: 'bsuir.com'\r\n\t//   }\r\n\t  try {\r\n\t\t  let parsedData = JSON.parse(data);\r\n\t\t  navigation.state.params.saveItem(parsedData);\r\n\r\n\t\t  alert(`Контакт ${parsedData.name} добавлен`);\r\n\t  } catch {\r\n\t\talert('Ошибка чтения контакта. Неверный QR-code');\r\n\t  }\r\n\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        justifyContent: 'flex-end',\r\n      }}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n\r\n      {scanned && (\r\n        <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />\r\n      )}\r\n    </View>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}